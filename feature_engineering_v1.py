from feature_utils import *
import pandas as pd
from datetime import datetime
from tqdm import tqdm
from sklearn.preprocessing import LabelEncoder
import warnings
warnings.filterwarnings('ignore')


fixed_fests = {
    'New Year\'s Day': {2018: ('2018-01-01', '2018-01-01'), 2019: ('2019-01-01', '2019-01-01'), 2020: ('2020-01-01', '2020-01-01'), 2021: ('2021-01-01', '2021-01-01'), 2022: ('2022-01-01', '2022-01-01'), 2023: ('2023-01-01', '2023-01-01'), 2024: ('2024-01-01', '2024-01-01'), 2025: ('2025-01-01', '2025-01-01')},
    'Makar Sankranti/Pongal': {2018: ('2018-01-01', '2018-01-01'), 2019: ('2019-01-01', '2019-01-01'), 2020: ('2020-01-13', '2020-01-16'), 2021: ('2021-01-13', '2021-01-16'), 2022: ('2022-01-13', '2022-01-16'), 2023: ('2023-01-13', '2023-01-16'), 2024: ('2024-01-13', '2024-01-16'), 2025: ('2025-01-13', '2025-01-16')},
    'Republic Day': {2018: ('2018-01-01', '2018-01-01'), 2019: ('2019-01-01', '2019-01-01'), 2020: ('2020-01-26', '2020-01-26'), 2021: ('2021-01-26', '2021-01-26'), 2022: ('2022-01-26', '2022-01-26'), 2023: ('2023-01-26', '2023-01-26'), 2024: ('2024-01-26', '2024-01-26'), 2025: ('2025-01-26', '2025-01-26')},
    'Dr. Ambedkar Jayanti': {2018: ('2018-01-01', '2018-01-01'), 2019: ('2019-01-01', '2019-01-01'), 2020: ('2020-04-14', '2020-04-14'), 2021: ('2021-04-14', '2021-04-14'), 2022: ('2022-04-14', '2022-04-14'), 2023: ('2023-04-14', '2023-04-14'), 2024: ('2024-04-14', '2024-04-14'), 2025: ('2025-04-14', '2025-04-14')},
    'May Day/Workers\' Day': {2018: ('2018-01-01', '2018-01-01'), 2019: ('2019-01-01', '2019-01-01'), 2020: ('2020-05-01', '2020-05-01'), 2021: ('2021-05-01', '2021-05-01'), 2022: ('2022-05-01', '2022-05-01'), 2023: ('2023-05-01', '2023-05-01'), 2024: ('2024-05-01', '2024-05-01'), 2025: ('2025-05-01', '2025-05-01')},
    'Independence Day': {2018: ('2018-01-01', '2018-01-01'), 2019: ('2019-01-01', '2019-01-01'), 2020: ('2020-08-15', '2020-08-15'), 2021: ('2021-08-15', '2021-08-15'), 2022: ('2022-08-15', '2022-08-15'), 2023: ('2023-08-15', '2023-08-15'), 2024: ('2024-08-15', '2024-08-15'), 2025: ('2025-08-15', '2025-08-15')},
    'Gandhi Jayanti': {2018: ('2018-01-01', '2018-01-01'), 2019: ('2019-01-01', '2019-01-01'), 2020: ('2020-10-02', '2020-10-02'), 2021: ('2021-10-02', '2021-10-02'), 2022: ('2022-10-02', '2022-10-02'), 2023: ('2023-10-02', '2023-10-02'), 2024: ('2024-10-02', '2024-10-02'), 2025: ('2025-10-02', '2025-10-02')},
    'Kannada Rajyotsava': {2018: ('2018-01-01', '2018-01-01'), 2019: ('2019-01-01', '2019-01-01'), 2020: ('2020-11-01', '2020-11-01'), 2021: ('2021-11-01', '2021-11-01'), 2022: ('2022-11-01', '2022-11-01'), 2023: ('2023-11-01', '2023-11-01'), 2024: ('2024-11-01', '2024-11-01'), 2025: ('2025-11-01', '2025-11-01')},
    'Christmas': {2018: ('2018-01-01', '2018-01-01'), 2019: ('2019-01-01', '2019-01-01'), 2020: ('2020-12-25', '2020-12-25'), 2021: ('2021-12-25', '2021-12-25'), 2022: ('2022-12-25', '2022-12-25'), 2023: ('2023-12-25', '2023-12-25'), 2024: ('2024-12-25', '2024-12-25'), 2025: ('2025-12-25', '2025-12-25')},
    'Telangana Formation Day': {2018: ('2018-01-01', '2018-01-01'), 2019: ('2019-01-01', '2019-01-01'), 2020: ('2020-06-02', '2020-06-02'), 2021: ('2021-06-02', '2021-06-02'), 2022: ('2022-06-02', '2022-06-02'), 2023: ('2023-06-02', '2023-06-02'), 2024: ('2024-06-02', '2024-06-02'), 2025: ('2025-06-02', '2025-06-02')},
    'International Yoga Festival': {2018: ('2018-01-01', '2018-01-01'), 2019: ('2019-01-01', '2019-01-01'), 2020: ('2020-01-01', '2020-01-07'), 2021: ('2021-01-01', '2021-01-07'), 2022: ('2022-01-01', '2022-01-07'), 2023: ('2023-01-01', '2023-01-07'), 2024: ('2024-01-01', '2024-01-07'), 2025: ('2025-01-01', '2025-01-07')},
    'Numaish (All India Industrial Exhibition)': {2018: ('2018-01-01', '2018-01-01'), 2019: ('2019-01-01', '2019-01-01'), 2020: ('2020-01-01', '2020-02-15'), 2021: ('2021-01-01', '2021-02-15'), 2022: ('2022-01-01', '2022-02-15'), 2023: ('2023-01-01', '2023-02-15'), 2024: ('2024-01-01', '2024-02-15'), 2025: ('2025-01-01', '2025-02-15')}
}

moving_dates = {
    'Guru Nanak Jayanti': {2018: ('2018-11-19', '2018-11-19'), 2019: ('2019-11-19', '2019-11-19'), 2020: ('2020-11-19', '2020-11-19'), 2021: ('2021-11-19', '2021-11-19'), 2022: ('2022-11-08', '2022-11-08'), 2023: ('2023-11-27', '2023-11-27'), 2024: ('2024-11-15', '2024-11-15'), 2025: ('2025-11-15', '2025-11-15')},# 2025 and 2021 is a proxy date
    'Naraka Chaturdashi': {2018: ('2018-11-04', '2018-11-04'), 2019: ('2019-11-04', '2019-11-04'), 2020: ('2020-11-04', '2020-11-04'), 2021: ('2021-11-04', '2021-11-04'), 2022: ('2022-10-24', '2022-10-24'), 2023: ('2023-11-12', '2023-11-12'), 2024: ('2024-10-31', '2024-10-31'), 2025: ('2025-10-31', '2025-10-31')},# 2025 and 2021 is a proxy date
    'Bhai Dooj': {2018: ('2018-11-06', '2018-11-06'), 2019: ('2019-11-06', '2019-11-06'), 2020: ('2020-11-06', '2020-11-06'), 2021: ('2021-11-06', '2021-11-06'), 2022: ('2022-10-26', '2022-10-26'), 2023: ('2023-11-15', '2023-11-15'), 2024: ('2024-11-03', '2024-11-03'), 2025: ('2025-11-03', '2025-11-03')},# 2025 and 2021 is a proxy date
    'Maha Navami': {2018: ('2018-10-14', '2018-10-14'), 2019: ('2019-10-14', '2019-10-14'), 2020: ('2020-10-14', '2020-10-14'), 2021: ('2021-10-14', '2021-10-14'), 2022: ('2022-10-04', '2022-10-04'), 2023: ('2023-10-23', '2023-10-23'), 2024: ('2024-10-11', '2024-10-11'), 2025: ('2025-10-11', '2025-10-11')},# 2025 and 2021 is a proxy date
    'Vijayadashami (Dussehra)': {2018: ('2018-10-15', '2018-10-15'), 2019: ('2019-10-15', '2019-10-15'), 2020: ('2020-10-15', '2020-10-15'), 2021: ('2021-10-15', '2021-10-15'), 2022: ('2022-10-05', '2022-10-05'), 2023: ('2023-10-24', '2023-10-24'), 2024: ('2024-10-12', '2024-10-12'), 2025: ('2025-10-12', '2025-10-12')},# 2025 and 2021 is a proxy date
    'Karwa Chauth': {2018: ('2018-10-24', '2018-10-24'), 2019: ('2019-10-24', '2019-10-24'), 2020: ('2020-10-24', '2020-10-24'), 2021: ('2021-10-24', '2021-10-24'), 2022: ('2022-10-13', '2022-10-13'), 2023: ('2023-10-31', '2023-10-31'), 2024: ('2024-10-20', '2024-10-20'), 2025: ('2025-10-20', '2025-10-20')},# 2025 and 2021 is a proxy date
    'Diwali': {2018: ('2018-11-04', '2018-11-04'), 2019: ('2019-11-04', '2019-11-04'), 2020: ('2020-11-04', '2020-11-04'), 2021: ('2021-11-04', '2021-11-04'), 2022: ('2022-10-24', '2022-10-24'), 2023: ('2023-11-12', '2023-11-12'), 2024: ('2024-10-31', '2024-10-31'), 2025: ('2025-10-31', '2025-10-31')},# 2025 and 2021 is a proxy date
    'Krishna Janmashtami': {2018: ('2018-08-30', '2018-08-30'), 2019: ('2019-08-30', '2019-08-30'), 2020: ('2020-08-30', '2020-08-30'), 2021: ('2021-08-30', '2021-08-30'), 2022: ('2022-08-19', '2022-08-19'), 2023: ('2023-09-06', '2023-09-06'), 2024: ('2024-08-26', '2024-08-26'), 2025: ('2025-08-26', '2025-08-26')},# 2025 and 2021 is a proxy date
    'Ganesh Chaturthi': {2018: ('2018-09-10', '2018-09-10'), 2019: ('2019-09-10', '2019-09-10'), 2020: ('2020-09-10', '2020-09-10'), 2021: ('2021-09-10', '2021-09-10'), 2022: ('2022-08-31', '2022-08-31'), 2023: ('2023-09-19', '2023-09-19'), 2024: ('2024-09-07', '2024-09-07'), 2025: ('2025-09-07', '2025-09-07')},# 2025 and 2021 is a proxy date
    'Eid-ul-Fitr': {2018: ('2018-05-13', '2018-05-13'), 2019: ('2019-05-13', '2019-05-13'), 2020: ('2020-05-13', '2020-05-13'), 2021: ('2021-05-13', '2021-05-13'), 2022: ('2022-05-02', '2022-05-02'), 2023: ('2023-04-21', '2023-04-21'), 2024: ('2024-04-10', '2024-04-10'), 2025: ('2025-04-10', '2025-04-10')},# 2025 and 2021 is a proxy date
    'Buddha Purnima': {2018: ('2018-05-26', '2018-05-26'), 2019: ('2019-05-26', '2019-05-26'), 2020: ('2020-05-26', '2020-05-26'), 2021: ('2021-05-26', '2021-05-26'), 2022: ('2022-05-16', '2022-05-16'), 2023: ('2023-05-05', '2023-05-05'), 2024: ('2024-05-23', '2024-05-23'), 2025: ('2025-05-23', '2025-05-23')},# 2025 and 2021 is a proxy date
    'Bakrid (Eid-ul-Adha)': {2018: ('2018-07-21', '2018-07-21'), 2019: ('2019-07-21', '2019-07-21'), 2020: ('2020-07-21', '2020-07-21'), 2021: ('2021-07-21', '2021-07-21'), 2022: ('2022-07-10', '2022-07-10'), 2023: ('2023-06-29', '2023-06-29'), 2024: ('2024-06-17', '2024-06-17'), 2025: ('2025-06-17', '2025-06-17')},# 2025 and 2021 is a proxy date
    'Muharram': {2018: ('2018-08-19', '2018-08-19'), 2019: ('2019-08-19', '2019-08-19'), 2020: ('2020-08-19', '2020-08-19'), 2021: ('2021-08-19', '2021-08-19'), 2022: ('2022-08-09', '2022-08-09'), 2023: ('2023-07-20', '2023-07-20'), 2024: ('2024-07-07', '2024-07-07'), 2025: ('2025-07-07', '2025-07-07')},# 2025 and 2021 is a proxy date
    'Ratha Saptami': {2018: ('2018-02-19', '2018-02-19'), 2019: ('2019-02-19', '2019-02-19'), 2020: ('2020-02-19', '2020-02-19'), 2021: ('2021-02-19', '2021-02-19'), 2022: ('2022-02-07', '2022-02-07'), 2023: ('2023-01-28', '2023-01-28'), 2024: ('2024-02-16', '2024-02-16'), 2025: ('2025-02-16', '2025-02-16')},# 2025 and 2021 is a proxy date
    'Maha Shivaratri': {2018: ('2018-03-11', '2018-03-11'), 2019: ('2019-03-11', '2019-03-11'), 2020: ('2020-03-11', '2020-03-11'), 2021: ('2021-03-11', '2021-03-11'), 2022: ('2022-03-01', '2022-03-01'), 2023: ('2023-02-18', '2023-02-18'), 2024: ('2024-03-08', '2024-03-08'), 2025: ('2025-03-08', '2025-03-08')},# 2025 and 2021 is a proxy date
    'Holika Dahan': {2018: ('2018-03-28', '2018-03-28'), 2019: ('2019-03-28', '2019-03-28'), 2020: ('2020-03-28', '2020-03-28'), 2021: ('2021-03-28', '2021-03-28'), 2022: ('2022-03-17', '2022-03-17'), 2023: ('2023-03-07', '2023-03-07'), 2024: ('2024-03-24', '2024-03-24'), 2025: ('2025-03-24', '2025-03-24')},# 2025 and 2021 is a proxy date
    'Holi': {2018: ('2018-03-29', '2018-03-29'), 2019: ('2019-03-29', '2019-03-29'), 2020: ('2020-03-29', '2020-03-29'), 2021: ('2021-03-29', '2021-03-29'), 2022: ('2022-03-18', '2022-03-18'), 2023: ('2023-03-08', '2023-03-08'), 2024: ('2024-03-25', '2024-03-25'), 2025: ('2025-03-25', '2025-03-25')},# 2025 and 2021 is a proxy date
    'Ugadi': {2018: ('2018-04-13', '2018-04-13'), 2019: ('2019-04-13', '2019-04-13'), 2020: ('2020-04-13', '2020-04-13'), 2021: ('2021-04-13', '2021-04-13'), 2022: ('2022-04-02', '2022-04-02'), 2023: ('2023-03-22', '2023-03-22'), 2024: ('2024-04-09', '2024-04-09'), 2025: ('2025-04-09', '2025-04-09')},# 2025 and 2021 is a proxy date
    'Ram Navami': {2018: ('2018-04-21', '2018-04-21'), 2019: ('2019-04-21', '2019-04-21'), 2020: ('2020-04-21', '2020-04-21'), 2021: ('2021-04-21', '2021-04-21'), 2022: ('2022-04-10', '2022-04-10'), 2023: ('2023-03-30', '2023-03-30'), 2024: ('2024-04-17', '2024-04-17'), 2025: ('2025-04-17', '2025-04-17')},# 2025 and 2021 is a proxy date
    'Hanuman Jayanti': {2018: ('2018-04-27', '2018-04-27'), 2019: ('2019-04-27', '2019-04-27'), 2020: ('2020-04-27', '2020-04-27'), 2021: ('2021-04-27', '2021-04-27'), 2022: ('2022-04-16', '2022-04-16'), 2023: ('2023-04-06', '2023-04-06'), 2024: ('2024-04-23', '2024-04-23'), 2025: ('2025-04-23', '2025-04-23')},# 2025 and 2021 is a proxy date
    'Good Friday': {2018: ('2018-04-02', '2018-04-02'), 2019: ('2019-04-02', '2019-04-02'), 2020: ('2020-04-02', '2020-04-02'), 2021: ('2021-04-02', '2021-04-02'), 2022: ('2022-04-15', '2022-04-15'), 2023: ('2023-04-07', '2023-04-07'), 2024: ('2024-03-29', '2024-03-29'), 2025: ('2025-03-29', '2025-03-29')},# 2025 and 2021 is a proxy date
    'Tirupati Brahmotsavam': {2018: ('2018-09-07', '2018-09-15'), 2019: ('2019-09-07', '2019-09-15'), 2020: ('2020-09-07', '2020-09-15'), 2021: ('2021-09-07', '2021-09-15'), 2022: ('2022-09-19', '2022-09-27'), 2023: ('2023-09-06', '2023-09-14'), 2024: ('2024-09-27', '2024-10-05'), 2025: ('2025-09-27', '2025-10-05')},# 2025 and 2021 is a proxy date
    'Visakha Utsav': {2018: ('2018-12-26', '2018-12-30'), 2019: ('2019-12-26', '2019-12-30'), 2020: ('2020-12-26', '2020-12-30'), 2021: ('2021-12-26', '2021-12-30'), 2022: ('2022-12-23', '2022-12-27'), 2023: ('2023-12-22', '2023-12-26'), 2024: ('2024-12-25', '2024-12-29'), 2025: ('2025-12-25', '2025-12-29')},# 2025 and 2021 is a proxy date
    'Deccan Festival': {2018: ('2018-02-25', '2018-03-01'), 2019: ('2019-02-25', '2019-03-01'), 2020: ('2020-02-25', '2020-03-01'), 2021: ('2021-02-25', '2021-03-01'), 2022: ('2022-02-25', '2022-03-01'), 2023: ('2023-02-24', '2023-03-01'), 2024: ('2024-02-24', '2024-03-01'), 2025: ('2025-02-24', '2025-03-01')},# 2025 and 2021 is a proxy date
    'Lumbini Festival': {2018: ('2018-12-20', '2018-12-22'), 2019: ('2019-12-20', '2019-12-22'), 2020: ('2020-12-20', '2020-12-22'), 2021: ('2021-12-20', '2021-12-22'), 2022: ('2022-12-15', '2022-12-17'), 2023: ('2023-12-18', '2023-12-20'), 2024: ('2024-12-15', '2024-12-17'), 2025: ('2025-12-15', '2025-12-17')},# 2025 and 2021 is a proxy date
    'Art Mela': {2018: ('2018-10-20', '2018-10-22'), 2019: ('2019-10-20', '2019-10-22'), 2020: ('2020-10-20', '2020-10-22'), 2021: ('2021-10-20', '2021-10-22'), 2022: ('2022-10-15', '2022-10-17'), 2023: ('2023-10-18', '2023-10-20'), 2024: ('2024-10-18', '2024-10-20'), 2025: ('2025-10-18', '2025-10-20')},# 2025 and 2021 is a proxy date
    'Bathukamma Festival': {2018: ('2018-09-17', '2018-09-26'), 2019: ('2019-09-17', '2019-09-26'), 2020: ('2020-09-17', '2020-09-26'), 2021: ('2021-09-17', '2021-09-26'), 2022: ('2022-09-22', '2022-09-30'), 2023: ('2023-09-15', '2023-09-24'), 2024: ('2024-09-18', '2024-09-26'), 2025: ('2025-09-18', '2025-09-26')},# 2025 and 2021 is a proxy date
    'Bonalu Festival': {2018: ('2018-07-16', '2018-07-24'), 2019: ('2019-07-16', '2019-07-24'), 2020: ('2020-07-16', '2020-07-24'), 2021: ('2021-07-16', '2021-07-24'), 2022: ('2022-07-17', '2022-07-25'), 2023: ('2023-07-15', '2023-07-23'), 2024: ('2024-07-15', '2024-07-23'), 2025: ('2025-07-15', '2025-07-23')},# 2025 and 2021 is a proxy date
    'Hyderabad International Film Festival': {2018: ('2018-09-21', '2018-09-27'), 2019: ('2019-09-21', '2019-09-27'), 2020: ('2020-09-21', '2020-09-27'), 2021: ('2021-09-21', '2021-09-27'), 2022: ('2022-09-20', '2022-09-26'), 2023: ('2023-09-19', '2023-09-25'), 2024: ('2024-09-20', '2024-09-26'), 2025: ('2025-09-20', '2025-09-26')},# 2025 and 2021 is a proxy date
    'Hampi Utsav': {2018: ('2018-11-17', '2018-11-19'), 2019: ('2019-11-17', '2019-11-19'), 2020: ('2020-11-17', '2020-11-19'), 2021: ('2021-11-17', '2021-11-19'), 2022: ('2022-11-18', '2022-11-20'), 2023: ('2023-11-17', '2023-11-19'), 2024: ('2024-11-15', '2024-11-17'), 2025: ('2025-11-15', '2025-11-17')},# 2025 and 2021 is a proxy date
    'Karaga Festival': {2018: ('2018-03-26', '2018-04-02'), 2019: ('2019-03-26', '2019-04-02'), 2020: ('2020-03-26', '2020-04-02'), 2021: ('2021-03-26', '2021-04-02'), 2022: ('2022-04-01', '2022-04-08'), 2023: ('2023-03-25', '2023-04-01'), 2024: ('2024-03-30', '2024-04-06'), 2025: ('2025-03-30', '2025-04-06')},# 2025 and 2021 is a proxy date
    'Mysore Dasara': {2018: ('2018-09-26', '2018-10-05'), 2019: ('2019-09-26', '2019-10-05'), 2020: ('2020-09-26', '2020-10-05'), 2021: ('2021-09-26', '2021-10-05'), 2022: ('2022-09-26', '2022-10-05'), 2023: ('2023-09-26', '2023-10-05'), 2024: ('2024-09-29', '2024-10-08'), 2025: ('2025-09-29', '2025-10-08')},# 2025 and 2021 is a proxy date
    'Bangalore Habba': {2018: ('2018-12-15', '2018-12-25'), 2019: ('2019-12-15', '2019-12-25'), 2020: ('2020-12-15', '2020-12-25'), 2021: ('2021-12-15', '2021-12-25'), 2022: ('2022-12-15', '2022-12-25'), 2023: ('2023-12-15', '2023-12-25'), 2024: ('2024-12-15', '2024-12-25'), 2025: ('2025-12-15', '2025-12-25')},# 2025 and 2021 is a proxy date
}

school_holidays = {
    'Summer': {
        2021: ('2021-04-30', '2021-06-12'),
        2022: ('2022-04-29', '2022-06-11'),
        2023: ('2023-04-28', '2023-06-10'),
        2024: ('2024-04-30', '2024-06-12')
    },
    'Dasara': {
        2021: ('2021-10-10', '2021-10-20'),
        2022: ('2022-10-05', '2022-10-15'),
        2023: ('2023-10-15', '2023-10-25'),
        2024: ('2024-10-10', '2024-10-20')
    },
    'Christmas': {
        2021: ('2021-12-23', '2022-01-01'),
        2022: ('2022-12-22', '2023-01-01'),
        2023: ('2023-12-21', '2024-01-01'),
        2024: ('2024-12-23', '2025-01-01')
    }
}

wedding_seasons = {
    'Batch_1': {
        2021: ('2021-01-01', '2021-02-28'),
        2022: ('2022-01-01', '2022-02-28'),
        2023: ('2023-01-01', '2023-02-28'),
        2024: ('2024-01-01', '2024-02-29')  # Leap year
    },
    'Batch_2': {
        2021: ('2021-04-01', '2021-06-30'),
        2022: ('2022-04-01', '2022-06-30'),
        2023: ('2023-04-01', '2023-06-30'),
        2024: ('2024-04-01', '2024-06-30')
    },
    'Batch_3': {
        2021: ('2021-09-01', '2021-11-30'),
        2022: ('2022-09-01', '2022-11-30'),
        2023: ('2023-09-01', '2023-11-30'),
        2024: ('2024-09-01', '2024-11-30')
    },
    'Batch_4': {
        2021: ('2021-12-01', '2021-12-31'),
        2022: ('2022-12-01', '2022-12-31'),
        2023: ('2023-12-01', '2023-12-31'),
        2024: ('2024-12-01', '2024-12-31')
    }
}


def change_str_dicts_to_datetime(calend_dict_event_year_datetuple):
    ranges = {
        event: {
            year: (
                pd.to_datetime(start),
                pd.to_datetime(end)
            ) for year, (start, end) in years.items()
        } for event, years in calend_dict_event_year_datetuple.items()
    }
    return ranges

def calculate_since_until_days_vectorized(f_df, calend_dict_event_year_datetuple, until_since_col_prefix: str):
    event_ranges = change_str_dicts_to_datetime(calend_dict_event_year_datetuple)

    # Iterate through each row (journey) in the DataFrame
    for index, row in tqdm(f_df.iterrows(), total = len(f_df)):
        journey_date = pd.to_datetime(row["Journey DateTime"])

        for event, year_ranges in event_ranges.items():
            journey_year = journey_date.year

            # Initialize hours until/since variables
            hours_until = float('inf')
            hours_since = float('inf')

            # --o--o--o--o
            for year in [journey_year, journey_year + 1]:  # check current year
                if year in year_ranges:
                    event_date = year_ranges[year][0]  # start date of the event
                    if event_date >= journey_date:
                        # Calculate hours difference
                        hours_until = min(hours_until, (event_date - journey_date).total_seconds() / 3600)
                        break

            # Check for the nearest past date (Days Since)
            for year in [journey_year, journey_year - 1]:  # check current year and previous year
                if year in year_ranges:
                    event_date = year_ranges[year][0]  # start date of the event
                    if event_date <= journey_date:
                        # Calculate hours difference
                        hours_since = min(hours_since, (journey_date - event_date).total_seconds() / 3600)
                        break

            # Assign the calculated days (hours / 24) until and since to the DataFrame
            f_df.loc[index, f'{until_since_col_prefix}{event}_Days Until'] = round(hours_until / 24) if hours_until != float('inf') else None
            f_df.loc[index, f'{until_since_col_prefix}{event}_Days Since'] = round(hours_since / 24) if hours_since != float('inf') else None

    return f_df


def check_if_in_range_vectorized(f_df, calend_dict_event_year_datetuple, name:str):
    holiday_ranges = change_str_dicts_to_datetime(calend_dict_event_year_datetuple)
    # Create a list to store holiday results
    f_df[f'{name}'] = None

    # Iterate through each journey date
    for index, row in tqdm(f_df.iterrows(), total = len(f_df)):
        journey_date = row['Journey DateTime']
        journey_year = journey_date.year
        for vacation_type, df_journey_years in holiday_ranges.items():
            for offset_year in [0, -1]:
                holiday_year = journey_year + offset_year
                if holiday_year in df_journey_years:
                    start_date, end_date = df_journey_years[holiday_year]
                    start_date -= pd.Timedelta(days=7)  # Extend range by -7 days
                    end_date += pd.Timedelta(days=7)    # Extend range by +7 days
                    if start_date <= journey_date <= end_date:
                        f_df.at[index, f'{name}'] = vacation_type
                        break
    return f_df

def encode_list_columns(df, columns):
    for column in columns:
        df[column] = df[column].apply(lambda x: ','.join(x) if isinstance(x, (list, np.ndarray)) else x)
        dummies = df[column].str.get_dummies(sep=',')
        dummies.columns = [f"{column}_{col}" for col in dummies.columns]
        df = df.join(dummies)
    df = df.drop(columns=columns)
    return df


def construct_features(s):
    f_df = s.copy()
    # Time Features
    with tqdm(total=6, desc="Time Features", leave=False) as pbar:
        tqdm.write("Processing Time Features...")
        f_df['Journey DateTime'] = pd.to_datetime(f_df['Journey DateTime'])  # Ensure the column is in datetime format
        f_df['Month'] = f_df['Journey DateTime'].dt.month
        f_df['Day'] = f_df['Journey DateTime'].dt.day
        f_df['Day of Week'] = f_df['Journey DateTime'].dt.day_name()  # Get day of the week
        f_df['Hour'] = f_df['Journey DateTime'].dt.hour
        f_df['Minute'] = f_df['Journey DateTime'].dt.minute
        f_df['Is Weekend'] = f_df['Day of Week'].isin(['Saturday', 'Sunday'])
        pbar.update(1)

        tqdm.write("Processing Fixed Festivals...")
        # Fixed Fests
        f_df = calculate_since_until_days_vectorized(f_df, fixed_fests, "Fixed_Dates_")
        pbar.update(1)

        tqdm.write("Processing Moving Festival Ranges...")
        # Moving Fest Ranges
        f_df = calculate_since_until_days_vectorized(f_df, moving_dates, "Moving_Dates_")
        pbar.update(1)

        tqdm.write("Processing Vacation Range...")
        # Vacation range
        f_df = check_if_in_range_vectorized(f_df, school_holidays, "School_vacation")
        pbar.update(1)

        tqdm.write("Processing Wedding Season Range...")
        # Wedding Range
        f_df = check_if_in_range_vectorized(f_df, wedding_seasons, "Wedding_Season")
        pbar.update(1)

        tqdm.write("Finalizing Data...")
        # In Domain or no
        f_df["School_vacation"].fillna("No Vacation", inplace=True)
        f_df["Wedding_Season"].fillna("No Wedding", inplace=True)
        pbar.update(1)

    tqdm.write("Feature construction completed.")
    return f_df

def categorize_proximity(days):
    if days < 1:
        return "Carolina Reaper"
    elif days == 1:
        return 'hottest'
    elif 2 <= days <= 7:
        return 'hotter'
    elif 8 <= days <= 20:
        return 'hot'
    elif 21 <= days <= 25:
        return 'cold'
    elif 26 <= days <= 31:
        return 'colder'
    else:
        return 'coldest'

def catagorizing_days(m_df):
    days_columns = [col for col in m_df.columns if 'Days Until' in col or 'Days Since' in col]
    label_encoders = {}
    for col in days_columns:
        m_df[col + '_Proximity'] = m_df[col].apply(categorize_proximity)
        le = LabelEncoder()
        m_df[col + '_Proximity'] = le.fit_transform(m_df[col + '_Proximity'])
        label_encoders[col + '_Proximity'] = le

    m_df.drop(columns=days_columns, inplace=True)
    return m_df
